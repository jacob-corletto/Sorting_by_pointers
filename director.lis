     1                                  ;Declarations
     2                                  number_of_cells EQU 8 ;this was changed from 5 ==> 8
     3                                  
     4                                  extern printf                                               
     5                                  extern scanf
     6                                  extern malloc
     7                                  extern input_array
     8                                  extern output_array
     9                                  ;extern sortpointers
    10                                  
    11                                  global director
    12                                  
    13                                  segment .data
    14 00000000 546869732070726F67-     intro db "This program will sort all of your doubles",10,0
    14 00000009 72616D2077696C6C20-
    14 00000012 736F727420616C6C20-
    14 0000001B 6F6620796F75722064-
    14 00000024 6F75626C65730A00   
    15                                  
    16 0000002C 506C6561736520656E-     input_numbers db "Please enter floating point numbers seperated by whitespave. After the last numeric input enter at lease one more qhitespave and press cntl+d",10,0
    16 00000035 74657220666C6F6174-
    16 0000003E 696E6720706F696E74-
    16 00000047 206E756D6265727320-
    16 00000050 736570657261746564-
    16 00000059 206279207768697465-
    16 00000062 73706176652E204166-
    16 0000006B 74657220746865206C-
    16 00000074 617374206E756D6572-
    16 0000007D 696320696E70757420-
    16 00000086 656E74657220617420-
    16 0000008F 6C65617365206F6E65-
    16 00000098 206D6F726520716869-
    16 000000A1 746573706176652061-
    16 000000AA 6E6420707265737320-
    16 000000B3 636E746C2B640A00   
    17                                  
    18                                  ;to inputarray.asm
    19                                  
    20 000000BB 5468616E6B20796F75-     show_numbers db "Thank you. You entered these numbers",10,0
    20 000000C4 2E20596F7520656E74-
    20 000000CD 657265642074686573-
    20 000000D6 65206E756D62657273-
    20 000000DF 0A00               
    21                                  
    22                                  ;to outputarray.cpp
    23                                  
    24 000000E1 456E64206F66206F75-     end_of_array db "End of output of array",10,0
    24 000000EA 74707574206F662061-
    24 000000F3 727261790A00       
    25                                  
    26 000000F9 546865206172726179-     data_is_sorted db "The array is being sorted without moving any numbers",10,0
    26 00000102 206973206265696E67-
    26 0000010B 20736F727465642077-
    26 00000114 6974686F7574206D6F-
    26 0000011D 76696E6720616E7920-
    26 00000126 6E756D626572730A00 
    27                                  
    28                                  ;sortpointers
    29                                  
    30                                  ;outputarray.cpp
    31                                  
    32                                  ;end_of_array
    33                                  
    34 0000012F 546865206172726179-     sent_back_to_caller db "The array will be sent back to the caller function",10,0
    34 00000138 2077696C6C20626520-
    34 00000141 73656E74206261636B-
    34 0000014A 20746F207468652063-
    34 00000153 616C6C65722066756E-
    34 0000015C 6374696F6E0A00     
    35                                  
    36 00000163 256C6600                eight_byte_format db "%lf",0
    37                                  
    38 00000167 257300                  stringformat db "%s",0
    39                                  
    40                                  segment .bss
    41                                  align 64
    42 00000000 <res 340h>              backup resb 832
    43 00000340 <res 40h>               array resq number_of_cells
    44 00000380 <res 10h>               returnarray resq 2
    45                                  
    46                                  segment .text
    47                                  director:
    48                                  
    49                                  
    50 00000000 55                      push       rbp
    51 00000001 4889E5                  mov        rbp, rsp
    52 00000004 53                      push	   rbx
    53 00000005 51                      push       rcx
    54 00000006 52                      push       rdx
    55 00000007 56                      push       rsi
    56 00000008 57                      push       rdi
    57 00000009 4150                    push       r8
    58 0000000B 4151                    push       r9
    59 0000000D 4152                    push       r10
    60 0000000F 4153                    push       r11
    61 00000011 4154                    push       r12
    62 00000013 4155                    push	   r13 
    63 00000015 4156                    push       r14
    64 00000017 4157                    push	   r15 
    65 00000019 9C                      pushf        
    66                                  
    67                                  ;mov rax,7
    68                                  ;mov rdx,0
    69                                  ;xsave [backup]           
    70                                  
    71 0000001A B800000000              mov rax, 0
    72 0000001F 48BF-                   mov rdi, stringformat
    72 00000021 [6701000000000000] 
    73 00000029 48BE-                   mov rsi, intro
    73 0000002B [0000000000000000] 
    74 00000033 E8(00000000)            call printf
    75                                  
    76 00000038 B800000000              mov rax, 0
    77 0000003D 48BF-                   mov rdi, stringformat
    77 0000003F [6701000000000000] 
    78 00000047 48BE-                   mov rsi, input_numbers
    78 00000049 [2C00000000000000] 
    79 00000051 E8(00000000)            call printf
    80                                  
    81                                  ;go to input numbers
    82 00000056 B800000000              mov rax, 0
    83 0000005B 48BF-                   mov rdi, array
    83 0000005D [4003000000000000] 
    84 00000065 BE08000000              mov rsi, number_of_cells
    85 0000006A E8(00000000)            call input_array
    86 0000006F 4989C5                  mov r13,rax
    87                                  
    88                                  ;output array
    89 00000072 B800000000              mov rax, 0
    90 00000077 48BF-                   mov rdi, array
    90 00000079 [4003000000000000] 
    91 00000081 4C89EE                  mov rsi, r13
    92 00000084 E8(00000000)            call output_array
    93                                  
    94 00000089 B800000000              mov rax, 0
    95 0000008E 48BF-                   mov rdi, stringformat
    95 00000090 [6701000000000000] 
    96 00000098 48BE-                   mov rsi, end_of_array
    96 0000009A [E100000000000000] 
    97                                  
    98 000000A2 B800000000              mov rax, 0
    99 000000A7 48BF-                   mov rdi, stringformat
    99 000000A9 [6701000000000000] 
   100 000000B1 48BE-                   mov rsi, data_is_sorted
   100 000000B3 [F900000000000000] 
   101                                  
   102                                  ;sort array
   103                                  
   104                                  ;output array
   105                                  
   106 000000BB B800000000              mov rax, 0
   107 000000C0 48BF-                   mov rdi, stringformat
   107 000000C2 [6701000000000000] 
   108 000000CA 48BE-                   mov rsi, end_of_array
   108 000000CC [E100000000000000] 
   109                                  
   110 000000D4 B800000000              mov rax, 0
   111 000000D9 48BF-                   mov rdi, stringformat
   111 000000DB [6701000000000000] 
   112 000000E3 48BE-                   mov rsi, sent_back_to_caller
   112 000000E5 [2F01000000000000] 
   113                                  
   114                                  ;mov rax, 7
   115                                  ;mov rdx, 0
   116                                  ;xrstor xmm0, [rsp]
   117                                  
   118 000000ED 9D                      popf                                                        
   119 000000EE 415F                    pop        r15                                              
   120 000000F0 415E                    pop        r14                                              
   121 000000F2 415D                    pop        r13                                              
   122 000000F4 415C                    pop        r12                                              
   123 000000F6 415B                    pop        r11                                              
   124 000000F8 415A                    pop        r10                                              
   125 000000FA 4159                    pop        r9                                               
   126 000000FC 4158                    pop        r8                                               
   127 000000FE 5F                      pop        rdi                                              
   128 000000FF 5E                      pop        rsi                                              
   129 00000100 5A                      pop        rdx                                              
   130 00000101 59                      pop        rcx                                              
   131 00000102 5B                      pop        rbx                                              
   132 00000103 5D                      pop        rbp                                              
   133                                  
   134                                  
   135 00000104 C3                      ret
